<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2020-07-11T23:36:18-06:00</updated><id>/blog/feed.xml</id><title type="html">Dan’s Tech Blog</title><subtitle>Tech blog to share things that I have learned or find interesting!</subtitle><author><name>http://www.linkedin.com/in/dandobrick</name></author><entry><title type="html">Things I Forget About When Creating a New Character in Gloomhaven</title><link href="/blog/posts/gloomhaven-new-character/" rel="alternate" type="text/html" title="Things I Forget About When Creating a New Character in Gloomhaven" /><published>2020-07-11T00:00:00-06:00</published><updated>2020-07-11T00:00:00-06:00</updated><id>/blog/posts/gloomhaven-new-character</id><content type="html" xml:base="/blog/posts/gloomhaven-new-character/">&lt;p&gt;After not playing Gloomhaven for a bit, my wife and I opened up the box to realize that she needed to retire her character and make a new one before we play the scenario. Easy enough we thought, we opened up the rule book to ensure we were doing it the right way and… Lo and behold we had forgotten about things that make a fairly large difference.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-perks&quot;&gt;1. Perks&lt;/h2&gt;
&lt;p&gt;When you create a new character you get perks equal to the number of characters you have previously retired. This is something we both had forgotten about in the past so it was quite the surprise when we read that portion of the rules.&lt;/p&gt;

&lt;h2 id=&quot;2-you-get-to-do-city-activities-before-you-retire&quot;&gt;2. You get to do city activities before you retire&lt;/h2&gt;
&lt;p&gt;Before you retire you’ll be able to do various city activities such as buying items and donating to the sanctuary. This might not seem like a big deal or even related to creating a new character, but sometimes these activities have side effects such as increasing Gloomhaven’s…&lt;/p&gt;

&lt;h2 id=&quot;3-prosperity&quot;&gt;3. Prosperity&lt;/h2&gt;
&lt;p&gt;Your character is able to be created at a level &lt;em&gt;less than or equal to the current prosperity of Gloomhaven&lt;/em&gt;. Due to something we unlocked in an earlier game, one of those city activities my wife took part in before retiring increased the prosperity of the city to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, meaning my wife was able to create a character that immediately levels up to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;. Not only does she get the extra cards for each level but levelling up also gives perks, meaning she starts this character with FOUR perks (2 from her retired characters and 2 from levelling up).&lt;/p&gt;

&lt;p&gt;We haven’t played with her new character yet, but I bet they will be formidable! I’m not super close to my character’s retirement goal but hopefully I’ll remember these few things when I create my next character.&lt;/p&gt;</content><author><name>http://www.linkedin.com/in/dandobrick</name></author><category term="gloomhaven" /><category term="rules" /><category term="levelling" /><summary type="html">After not playing Gloomhaven for a bit, my wife and I opened up the box to realize that she needed to retire her character and make a new one before we play the scenario. Easy enough we thought, we opened up the rule book to ensure we were doing it the right way and… Lo and behold we had forgotten about things that make a fairly large difference.</summary></entry><entry><title type="html">PostgreSQL `num_nulls` and `num_nonnulls`</title><link href="/blog/posts/postgresql-null-functions/" rel="alternate" type="text/html" title="PostgreSQL `num_nulls` and `num_nonnulls`" /><published>2020-07-10T00:00:00-06:00</published><updated>2020-07-10T00:00:00-06:00</updated><id>/blog/posts/postgresql-null-functions</id><content type="html" xml:base="/blog/posts/postgresql-null-functions/">&lt;p&gt;&lt;img src=&quot;/blog/assets/images//posts/postgresql-null-functions/postgres.png&quot; alt=&quot;Postgres Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PostgreSQL offers a few comparison functions that are very useful if your table has columns that require exactly one entry. I ran into a situation recently that utilized the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_nonnulls&lt;/code&gt; function combined with a DB constraint to ensure that only one of a group of tables had data.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;The table I was designing looked something like this:&lt;/p&gt;

&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Column name&lt;/th&gt;
      &lt;th&gt;Data type&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool_response&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;boolean&lt;/td&gt;
      &lt;td&gt;Must be null if there is a value in any other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_response&lt;/code&gt; columns&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int_response&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td&gt;Must be null if there is a value in any other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_response&lt;/code&gt; columns&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text_response&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;text&lt;/td&gt;
      &lt;td&gt;Must be null if there is a value in any other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_response&lt;/code&gt; columns&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want each row in this table to only have ONE non-null value in any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_response&lt;/code&gt; column, and I wanted to implement a DB constraint on top of the application-level validation to catch any race conditions (such as multiple entries being
saved to the DB at the same time).&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Luckily I am using Postgres as our database which provides a &lt;a href=&quot;https://www.postgresql.org/docs/10/functions-comparison.html#FUNCTIONS-COMPARISON-FUNC-TABLE&quot;&gt;couple comparison functions&lt;/a&gt; that count the number of nulls in a set of columns: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_nonnulls&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_nulls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This table from the documentation linked above explains the two functions:&lt;/p&gt;

&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
      &lt;th&gt;Example Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;num_nonnulls(VARIADIC “any”)&lt;/td&gt;
      &lt;td&gt;returns the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-null&lt;/code&gt; arguments&lt;/td&gt;
      &lt;td&gt;num_nonnulls(1, NULL, 2)&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;num_nulls(VARIADIC “any”)&lt;/td&gt;
      &lt;td&gt;returns the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; arguments&lt;/td&gt;
      &lt;td&gt;num_nulls(1, NULL, 2)&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I decided to use the first function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_nonnulls&lt;/code&gt;), adding a constraint that checks those columns and ensure there is only a single non-null value:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_example_table&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only_one_non_null_response&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;CHECK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nonnulls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally I paired this with an app-level validation (this project is using rails + ActiveRecord):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyResponseClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:only_one_response&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_one_response&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;non_null_responses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_null_responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Must only have a single response&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>http://www.linkedin.com/in/dandobrick</name></author><category term="postgres" /><category term="rails" /><category term="ruby" /><category term="active-record" /><summary type="html">PostgreSQL offers a few comparison functions that are very useful if your table has columns that require exactly one entry. I ran into a situation recently that utilized the `num_nonnulls` function combined with a DB constraint to ensure that only one of a group of tables had data.</summary></entry><entry><title type="html">Dotfile Shenanigans</title><link href="/blog/posts/dotfile-shenanigans/" rel="alternate" type="text/html" title="Dotfile Shenanigans" /><published>2020-07-09T00:00:00-06:00</published><updated>2020-07-09T00:00:00-06:00</updated><id>/blog/posts/dotfile-shenanigans</id><content type="html" xml:base="/blog/posts/dotfile-shenanigans/">&lt;p&gt;Recently I watched &lt;a href=&quot;https://www.youtube.com/watch?v=V0p7pWSxOXw&quot;&gt;this video&lt;/a&gt; from RubyConf 2018 about dotfiles and decided to customize my own setup across my various systems (a personal Macbook, a work Macbook and a personal Linux server). If you’re not familiar with the concept of dotfiles, I’d watch the first few minutes of that video before continuing to read.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;If you just wanted to just check out my dotfiles I’ve linked them above (there’s even an install script if you love my setup), but I’ve picked out a few tweaks that I like and talk through them below&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#rcm&quot;&gt;RCM and storing dotfiles in github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dotfiles&quot;&gt;Specific Dotfiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rcm&quot;&gt;RCM&lt;/h2&gt;

&lt;p&gt;One of the most powerful things you can do with dotfiles is store them in version control and keep them updated across your various systems. This allows you to keep your workflow the same regardless of the machine you’re working on.&lt;/p&gt;

&lt;p&gt;Thoughtbot created this cool tool called &lt;a href=&quot;https://github.com/thoughtbot/rcm&quot;&gt;rcm&lt;/a&gt; that handles symlinking your dotfiles a location you specify to your home folder; making it easy to make changes across systems. Combining RCM and a &lt;a href=&quot;https://github.com/DanDobrick/dotfiles/blob/39dd2c0c68bc91885b9a1d896a5c73c9f3e60059/zshrc#L128&quot;&gt;couple&lt;/a&gt; of &lt;a href=&quot;https://github.com/DanDobrick/dotfiles/blob/39dd2c0c68bc91885b9a1d896a5c73c9f3e60059/zshrc#L179&quot;&gt;scripts&lt;/a&gt; I’ve written, all I have to do is push up a change to github and execute a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; on any system that has my dotfiles installed.&lt;/p&gt;

&lt;p&gt;Setting up RCM is DEAD simple; First we need to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rcm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re not running OSX or don’t use homebrew, you’ll need to follow the install instructions &lt;a href=&quot;https://github.com/thoughtbot/rcm#installation&quot;&gt;on rcm’s github page&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew tap thoughtbot/formulae
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rcm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkrc&lt;/code&gt; to add your dotfiles to a new dotfile directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.dotfiles&lt;/code&gt;. (See rcm documentation for customizing this location)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkrc .gitconfig .zshrc .rspec .p10k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally syncronize your home directory (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; flag is for verbose output)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rcup &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now all your dotfiles live in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.dotfiles&lt;/code&gt; (without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; prefix) and are symlinked to your home directory (with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; prefix)!&lt;/p&gt;

&lt;p&gt;Then you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.dotfiles&lt;/code&gt; do your version control of choice and sync all your systems!&lt;/p&gt;

&lt;h2 id=&quot;dotfiles&quot;&gt;Dotfiles&lt;/h2&gt;

&lt;p&gt;I have a few dotfile tweaks that I thought may have a broader application than just my system. Some are modifications of things I saw on the RubyConf video and some are straight stolen from other people dotfile repos. But that’s another awesome thing about people making their dotfiles open-source: you can take their ideas and either save yourself some time or make them better!&lt;/p&gt;

&lt;h3 id=&quot;pryrc&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pryrc&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Dotfile for the &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;pry gem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pryrc&lt;/code&gt; consists of this snippet which uses &lt;a href=&quot;https://github.com/awesome-print/awesome_print&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesome_print&lt;/code&gt;&lt;/a&gt; for all your pry sessions if it’s installed in your default rvm gemset. The syntax for your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pryrc&lt;/code&gt; is simple ruby which is nice.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`which rvm`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RVM not installed, attempting to load awesome_print from gemfile'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gemdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`rvm gemdir`&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gemdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/gems/awesome_print-1.8.0/lib/&quot;&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'awesome_print'&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;AwesomePrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoadError&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;warn&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'awesome_print not installed'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zshrc-or-bash_profile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Drop these in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash_profile&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zshrc&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;the-classic-mkcd&quot;&gt;The classic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkcd&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;A simple function to make directory then immediately &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;mkcd&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;colorful-ls-on-both-osx-and-linux&quot;&gt;Colorful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; on both OSX and Linux&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ls color + symbols for OSX and Linux&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt; 2&amp;gt;&amp;amp;1 | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--color&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ls --color=auto -F'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ls -GF'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;oh-my-zsh--plugins&quot;&gt;Oh My Zsh + plugins&lt;/h5&gt;
&lt;p&gt;Some people dislike Oh My Zsh, but I am personally a fan and have found myself loving the various &lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins&quot;&gt;plugins&lt;/a&gt; that are available, in particular the aliases that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; plugin provides:&lt;/p&gt;

&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Alias&lt;/th&gt;
      &lt;th&gt;Command&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ggpush&lt;/td&gt;
      &lt;td&gt;git push origin “$(git_current_branch)”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gwip&lt;/td&gt;
      &lt;td&gt;Commit wip branch&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gunwip&lt;/td&gt;
      &lt;td&gt;Uncommit wip branch&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;rcrc&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rcrc&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Dotfile to control rcm. I use it to exclude certain files and folders that I do &lt;em&gt;not&lt;/em&gt; want symlinked to my home directory when I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rcup&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;EXCLUDES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;README.md githooks/* install.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>http://www.linkedin.com/in/dandobrick</name></author><category term="dotfiles" /><category term="shell" /><category term="bash" /><category term="zsh" /><summary type="html">Recently I watched this video from RubyConf 2018 about dotfiles and decided to customize my own setup across my various systems (a personal Macbook, a work Macbook and a personal Linux server). If you’re not familiar with the concept of dotfiles, I’d watch the first few minutes of that video before continuing to read.</summary></entry></feed>