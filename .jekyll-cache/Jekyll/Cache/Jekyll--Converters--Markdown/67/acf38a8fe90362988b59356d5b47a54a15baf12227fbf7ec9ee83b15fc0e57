I"!5<p>In this post you will learn how to create a RESTful microservice
	from scratch using Spring-Boot, Eclipse &amp; Maven.</p>
<!--more-->

<p>Spring boot is one of the very popular frameworks to build
	microservices. In fact it has been chosen to be the standard for JBoss
	Fuse (Fuse Integration Services 2.0) deployments on Openshift. It can
	also be used for general java application purposes. You would be
	surprised how easy it is to create standalone packages that are capable
	of running production grade services.</p>

<p>Source code for this can be found here :
<a href="https://github.com/alainpham/rest-service">https://github.com/alainpham/rest-service</a>
</p>
<p>These are the steps of this tutorial</p>

<ul>
 	<li>Create a new simple Maven project in Eclipse</li>
 	<li>Add dependencies to Spring Boot</li>
 	<li>Launch your service</li>
</ul>

<h2>Prerequisites</h2>

<p>As a prerequisite for this tutorial you will need the following
	elements:</p>

<ul>
 	<li>Java JDK</li>
 	<li>Eclipse with maven plugin</li>
 	<li>Maven</li>
</ul>

<h2>Create a simple maven project</h2>

<p>First you must create a simple maven project. For that you can use the Eclipse Wizard</p>

<p><a href="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/create-new-maven-project.png"> <img class="center-block img-responsive" src="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/create-new-maven-project.png" alt="create new maven project" /></a></p>

<p>Chose simple project to have an empty pom.xml file</p>

<p><a href="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/choose-simple-project.png"> <img class="center-block img-responsive" src="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/choose-simple-project.png" alt="choose simple project in eclipse" /></a></p>

<p>Fill in the project details</p>

<p><a href="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/fill-project-infos.png"> <img class="center-block img-responsive" src="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/fill-project-infos.png" alt="fill project infos" /></a></p>

<h2>Edit the pom.xml file</h2>

<p>Add these parent, dependencies, and plugin blocs to your pom</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>rest-service<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>

	<span class="nt">&lt;parent&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;version&gt;</span>1.5.1.RELEASE<span class="nt">&lt;/version&gt;</span>
	<span class="nt">&lt;/parent&gt;</span>

	<span class="nt">&lt;dependencies&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>

		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;/dependencies&gt;</span>

	<span class="nt">&lt;build&gt;</span>
		<span class="nt">&lt;plugins&gt;</span>
			<span class="nt">&lt;plugin&gt;</span>
				<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
				<span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;/plugin&gt;</span>
		<span class="nt">&lt;/plugins&gt;</span>
	<span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span></code></pre></figure>

<h2>Create Application class</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.app</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>



<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<h2>Create a business model</h2>
<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.app.model</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>


	<span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>


<span class="o">}</span></code></pre></figure>

<h2>Create a service</h2>
<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.app.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.app.model.Person</span><span class="o">;</span>

<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"/svc/person"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonService</span> <span class="o">{</span>

	<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Person</span><span class="o">&gt;</span> <span class="n">personMap</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">PersonService</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="n">personMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span> <span class="nc">Long</span><span class="o">,</span> <span class="nc">Person</span><span class="o">&gt;();</span>


		<span class="nc">Person</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span>
		<span class="n">p1</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1</span><span class="n">l</span><span class="o">);</span>
		<span class="n">p1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"John Doe"</span><span class="o">);</span>


		<span class="nc">Person</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span>
		<span class="n">p2</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">2</span><span class="n">l</span><span class="o">);</span>
		<span class="n">p2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Jane Smith"</span><span class="o">);</span>

		<span class="n">personMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">p1</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">p1</span><span class="o">);</span>
		<span class="n">personMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">p2</span><span class="o">);</span>
	<span class="o">}</span>


	<span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"/{id}"</span><span class="o">,</span><span class="n">method</span> <span class="o">=</span> <span class="nc">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">Person</span> <span class="nf">getPerson</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">){</span>
		<span class="k">return</span> <span class="n">personMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h2>Run your application</h2>

<p>Open a command prompt in the root folder of your project and run : </p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell">mvn spring-boot:run</code></pre></figure>

<p>You can now also build your package and run the flat jar file</p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell">mvn package
java <span class="nt">-jar</span> target/rest-service-0.0.1-SNAPSHOT.jar</code></pre></figure>

<p>Now open your browser and consume your microservice by entering the following url</p>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell">http://localhost:8080/svc/person/1</code></pre></figure>

<p><a href="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/consume.png"> <img class="center-block img-responsive" src="/assets/images//posts/quickstart-rest-microservice-with-spring-boot/consume.png" alt="test rest service by consuming" /></a></p>

<p>The next post will be about how to deploy such microservices packaged in Docker containers on Openshift</p>

<p>Thanks for reading !</p>
:ET